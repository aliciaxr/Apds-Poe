{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tasha\\\\Downloads\\\\customer-portal (1)\\\\customer-portal\\\\Front-End\\\\src\\\\components\\\\EmployeeDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EmployeeDashboard() {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const navigate = useNavigate(); // Initialize navigate hook\n\n  useEffect(() => {\n    // Check if the user is authenticated\n    const authToken = localStorage.getItem('authToken');\n    if (!authToken) {\n      navigate('/employee-login'); // Redirect to login if not authenticated\n    }\n    const fetchTransactions = async () => {\n      const response = await fetch('http://localhost:5000/api/transactions', {\n        headers: {\n          'Authorization': `Bearer ${authToken}` // Pass the token in the headers\n        }\n      });\n      const data = await response.json();\n      setTransactions(data);\n    };\n    fetchTransactions();\n  }, [navigate]);\n  const handleVerify = async transactionId => {\n    const authToken = localStorage.getItem('authToken');\n    const response = await fetch(`http://localhost:5000/api/verify/${transactionId}`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${authToken}` // Pass token for authentication\n      }\n    });\n    const data = await response.json();\n    if (data.success) {\n      alert('Transaction verified!');\n    } else {\n      alert('Verification failed');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Employee Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: transactions.map(transaction => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [transaction.amount, \" \", transaction.currency, \" - \", transaction.status, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleVerify(transaction.id),\n          children: \"Verify\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this)]\n      }, transaction.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n_s(EmployeeDashboard, \"QYxkgwrBpwnIny+cmOWcfsZKEFs=\", false, function () {\n  return [useNavigate];\n});\n_c = EmployeeDashboard;\nexport default EmployeeDashboard;\nvar _c;\n$RefreshReg$(_c, \"EmployeeDashboard\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jsxDEV","_jsxDEV","EmployeeDashboard","_s","transactions","setTransactions","navigate","authToken","localStorage","getItem","fetchTransactions","response","fetch","headers","data","json","handleVerify","transactionId","method","success","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","map","transaction","amount","currency","status","onClick","id","_c","$RefreshReg$"],"sources":["C:/Users/tasha/Downloads/customer-portal (1)/customer-portal/Front-End/src/components/EmployeeDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction EmployeeDashboard() {\r\n    const [transactions, setTransactions] = useState([]);\r\n    const navigate = useNavigate(); // Initialize navigate hook\r\n\r\n    useEffect(() => {\r\n        // Check if the user is authenticated\r\n        const authToken = localStorage.getItem('authToken');\r\n        if (!authToken) {\r\n            navigate('/employee-login');  // Redirect to login if not authenticated\r\n        }\r\n\r\n        const fetchTransactions = async () => {\r\n            const response = await fetch('http://localhost:5000/api/transactions', {\r\n                headers: {\r\n                    'Authorization': `Bearer ${authToken}`  // Pass the token in the headers\r\n                },\r\n            });\r\n            const data = await response.json();\r\n            setTransactions(data);\r\n        };\r\n\r\n        fetchTransactions();\r\n    }, [navigate]);\r\n\r\n    const handleVerify = async (transactionId) => {\r\n        const authToken = localStorage.getItem('authToken');\r\n        const response = await fetch(`http://localhost:5000/api/verify/${transactionId}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': `Bearer ${authToken}`,  // Pass token for authentication\r\n            },\r\n        });\r\n\r\n        const data = await response.json();\r\n        if (data.success) {\r\n            alert('Transaction verified!');\r\n        } else {\r\n            alert('Verification failed');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Employee Dashboard</h1>\r\n            <ul>\r\n                {transactions.map((transaction) => (\r\n                    <li key={transaction.id}>\r\n                        {transaction.amount} {transaction.currency} - {transaction.status}\r\n                        <button onClick={() => handleVerify(transaction.id)}>Verify</button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EmployeeDashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAMQ,QAAQ,GAAGP,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhCF,SAAS,CAAC,MAAM;IACZ;IACA,MAAMU,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACnD,IAAI,CAACF,SAAS,EAAE;MACZD,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAE;IAClC;IAEA,MAAMI,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MAClC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;QACnEC,OAAO,EAAE;UACL,eAAe,EAAE,UAAUN,SAAS,EAAE,CAAE;QAC5C;MACJ,CAAC,CAAC;MACF,MAAMO,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAClCV,eAAe,CAACS,IAAI,CAAC;IACzB,CAAC;IAEDJ,iBAAiB,CAAC,CAAC;EACvB,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC;EAEd,MAAMU,YAAY,GAAG,MAAOC,aAAa,IAAK;IAC1C,MAAMV,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACnD,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoCK,aAAa,EAAE,EAAE;MAC9EC,MAAM,EAAE,MAAM;MACdL,OAAO,EAAE;QACL,eAAe,EAAE,UAAUN,SAAS,EAAE,CAAG;MAC7C;IACJ,CAAC,CAAC;IAEF,MAAMO,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAClC,IAAID,IAAI,CAACK,OAAO,EAAE;MACdC,KAAK,CAAC,uBAAuB,CAAC;IAClC,CAAC,MAAM;MACHA,KAAK,CAAC,qBAAqB,CAAC;IAChC;EACJ,CAAC;EAED,oBACInB,OAAA;IAAAoB,QAAA,gBACIpB,OAAA;MAAAoB,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BxB,OAAA;MAAAoB,QAAA,EACKjB,YAAY,CAACsB,GAAG,CAAEC,WAAW,iBAC1B1B,OAAA;QAAAoB,QAAA,GACKM,WAAW,CAACC,MAAM,EAAC,GAAC,EAACD,WAAW,CAACE,QAAQ,EAAC,KAAG,EAACF,WAAW,CAACG,MAAM,eACjE7B,OAAA;UAAQ8B,OAAO,EAAEA,CAAA,KAAMf,YAAY,CAACW,WAAW,CAACK,EAAE,CAAE;UAAAX,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAF/DE,WAAW,CAACK,EAAE;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGnB,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd;AAACtB,EAAA,CAtDQD,iBAAiB;EAAA,QAELH,WAAW;AAAA;AAAAkC,EAAA,GAFvB/B,iBAAiB;AAwD1B,eAAeA,iBAAiB;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}